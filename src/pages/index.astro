---
// Component Imports

// Full Astro Component Syntax:
// https://docs.astro.build/core-concepts/astro-components/
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Timers</title>
		<meta
			name="description"
			content="Small countdown timers app for workshops and presentations"
		/>
		<link rel="author" href="https://fabianmoronzirfas.me" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="msapplication-TileColor" content="#ffffff" />
		<meta name="msapplication-TileImage" content="/mstile-image.png" />
		<meta name="application-name" content="timers.qawsed" />
		<meta name="msapplication-tooltip" content="Tooltip" />
		<meta name="msapplication-config" content="/browserconfig.xml" />
		<meta name="theme-color" content="#ffffff" />
		<meta name="msapplication-config" content="/browserconfig.xml" />
		<meta name="msapplication-TileColor" content="#ff6347" />

		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		<link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png" />
		<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#ff6347" />
		<link rel="manifest" href="/site.webmanifest" />
		<link
			rel="icon"
			type="image/png"
			href="/android-chrome-192x192.png"
			sizes="192x192"
		/>
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		<link
			rel="apple-touch-icon-precomposed"
			sizes="180x180"
			href="/apple-touch-icon-precomposed.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="57x57"
			href="/apple-touch-icon-57x57.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="60x60"
			href="/apple-touch-icon-60x60.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="72x72"
			href="/apple-touch-icon-72x72.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="76x76"
			href="/apple-touch-icon-76x76.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="114x114"
			href="/apple-touch-icon-114x114.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="120x120"
			href="/apple-touch-icon-120x120.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="144x144"
			href="/apple-touch-icon-144x144.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="152x152"
			href="/apple-touch-icon-152x152.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="180x180"
			href="/apple-touch-icon-180x180.png"
		/>
		<style>
			@font-face {
				font-family: 'Roboto Slab';
				src: url('/Roboto Mono Bold for Powerline.ttf') format('truetype');
				font-weight: 600;
				font-style: normal;
			}
			html,
			body {
				font-family: system-ui;
				font-family: 'Roboto Slab', serif;
			}
			body {
				margin: 0 auto;
				max-width: 800px;
				display: flex;
				justify-content: center;
				align-items: center;
				height: 100vh;
			}
		</style>
	</head>
	<body>
		<main>
			<count-down></count-down>
			<script>
				import parse from 'parse-duration';
				import confetti from 'canvas-confetti';

				class CountDown extends HTMLElement {
					get timeLeft() {
						return this._timeLeft;
					}
					set timeLeft(val) {
						this._timeLeft = val;
					}

					get minutes() {
						return Math.floor(this._timeLeft / 60);
					}

					get seconds() {
						return this._timeLeft % 60;
					}

					set playing(val) {
						this._playing = val;
					}
					get playing() {
						return this._playing;
					}

					toggle() {
						this.playing = !this.playing;
					}

					constructor() {
						super();
						this.playing = false;
						const audio = new Audio('/analog-timer-74998.mp3');
						audio.addEventListener('ended', () => (this.playing = false));
						audio.removeEventListener('ended', () => (this.playing = false));
						const shadow = this.attachShadow({ mode: 'open' });
						const style = document.createElement('style');
						style.textContent = `
							#countdown {
								display: flex;
								justify-content: center;
								align-items: center;
								height: 100vh;
							}
							h1 {
								font-size: 10rem;
							}
							@media (max-width: 768px) {
								h1 {
									font-size: 6rem;
								}
							}
						`;
						const div = document.createElement('div');
						div.id = 'countdown';
						div.classList.add(
							...['flex', 'justify-center', 'items-center', 'h-screen'],
						);
						const h1 = document.createElement('h1');
						h1.classList.add('text-9xl');
						div.appendChild(h1);

						shadow.appendChild(style);
						shadow.appendChild(div);

						const defaultTimeLeft = 5 * 60; // in seconds
						this._timeLeft = defaultTimeLeft;
						document.addEventListener('DOMContentLoaded', () => {
							const searchParams = new URLSearchParams(window.location.search);
							const urlSecs = searchParams.get('secs');
							const duration = searchParams.get('duration');
							const parsedDuration = duration ? parse(duration) : null;
							const secs = urlSecs !== null ? parseInt(urlSecs) : NaN;

							if (!isNaN(secs) && secs > 0) {
								this.timeLeft = secs;
							} else {
								this.timeLeft = defaultTimeLeft;
							}
							// duration  always overrides urlSecs
							if (parsedDuration) {
								this.timeLeft = parsedDuration / 1000; // convert to seconds
							}

							const interval = setInterval(() => {
								this.timeLeft = this.timeLeft - 1;

								if (this.timeLeft === 14) {
									audio.play();
								}
								if (this.minutes <= 0 && this.seconds <= 0) {
									h1.textContent = `${'00'}:${'00'}`;
									audio.pause();
								} else {
									h1.textContent = `${this.minutes
										.toString()
										.padStart(2, '0')}:${this.seconds < 10 ? '0' : ''}${
										this.seconds
									}`;
								}

								if (this.timeLeft === 0) {
									clearInterval(interval);
								}

								if (this.timeLeft < 1 && this.timeLeft >= 0) {
									console.log('Confetti!');

									confetti({
										particleCount: 200,
										spread: 180,
										origin: { y: 0.6 },
									});
								}
							}, 1000);
						});
					}
				}
				customElements.define('count-down', CountDown);
			</script>
		</main>
	</body>
</html>
